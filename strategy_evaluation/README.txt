experiment1.py - Contains the code to conduct experiment 1. Call through the API: experiment1(in_sd, in_ed, out_sd, out_ed, symbol, sv, commission, impact) where in_sd, in_ed, out_sd, out_ed are datetime objects for in-sample start date, in-sample end date, out-of-sample start date, out-of-sample end date respectively. Symbol should be a string reflecting the ticker you're looking for. SV is your starting cash, Commission and Impact should be floats. Returns nothing, spits out experiment1.png.

experiment2.py - Contains the code to conduct experiment 2. Call through the API: experiment2(in_sd, in_ed, symbol, sv, commission, impacts) where in_sd, in_ed are datetime objects for in-sample start date, in-sample respectively. Symbol should be a string reflecting the ticker you're looking for. SV is your starting cash, Commission should be 0 but can be changed. Impacts should be a list of impacts of length 4. Returns a dataframe with statistics from cumulative returns generated by StrategyLearners using different impacts, also spits out experiment2.png. 

indicators.py - Contains the functions that take in price data and spits out either MACD, EMA, momentum, SMA, or bollinger Band Data. 

ManualStrategy.py - Contains code for the ManualStrategy. API through ms.testPolicy(symbol=symbol, sd=in_sd, ed=in_ed, sv=sv). See above for explanations. This returns a dataframe of trades. 

marketsimcode.py - Used to convert dataframes of trades to returns over time. mktsim.compute_portvals(df_trades, start_val=sv, commission=commission, impact=impact) where df_trades is a dataframe of trades in column "Shares" and "Symbol" containing the corresponding symbol. 

QLearner.py - Class QLearner. Called through by StrategyLearner as the chosen ML method. 

StrategyLearner.py - API through:
learner = sl.StrategyLearner(verbose=False, impact=impact, commission=commission) Constructor
learner.add_evidence(symbol=symbol, sd=in_sd, ed=in_ed, sv=sv) Trains
df_strat = learner.testPolicy(symbol=symbol, sd=in_sd, ed=in_ed, sv=sv) Predicts

testproject.py - Runs all code need for report. Running the main method spits out the Manual In and Out of sample png's as. Also calls experiments 1 and 2 which have their respective outputs. Finally to get the dataframe describing Manual Strategy's statistics, print out Man_Sum_Stats in the main function. Currently commented out. 
